// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wj-stack/job-search/ent/job"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	// 岗位 ID
	ID int `json:"id,omitempty"`
	// 岗位名称
	Title string `json:"title,omitempty"`
	// 公司名称
	Company string `json:"company,omitempty"`
	// 岗位描述
	Description string `json:"description,omitempty"`
	// 岗位要求
	Requirement string `json:"requirement,omitempty"`
	// 岗位类别
	JobCategory string `json:"job_category,omitempty"`
	// 城市信息
	CityInfo string `json:"city_info,omitempty"`
	// 招聘类型
	RecruitType string `json:"recruit_type,omitempty"`
	// 发布时间
	PublishTime time.Time `json:"publish_time,omitempty"`
	// 代码
	Code string `json:"code,omitempty"`
	// 城市列表
	CityList     []string `json:"city_list,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldCityList:
			values[i] = new([]byte)
		case job.FieldID:
			values[i] = new(sql.NullInt64)
		case job.FieldTitle, job.FieldCompany, job.FieldDescription, job.FieldRequirement, job.FieldJobCategory, job.FieldCityInfo, job.FieldRecruitType, job.FieldCode:
			values[i] = new(sql.NullString)
		case job.FieldPublishTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case job.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				j.Title = value.String
			}
		case job.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				j.Company = value.String
			}
		case job.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				j.Description = value.String
			}
		case job.FieldRequirement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requirement", values[i])
			} else if value.Valid {
				j.Requirement = value.String
			}
		case job.FieldJobCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_category", values[i])
			} else if value.Valid {
				j.JobCategory = value.String
			}
		case job.FieldCityInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city_info", values[i])
			} else if value.Valid {
				j.CityInfo = value.String
			}
		case job.FieldRecruitType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recruit_type", values[i])
			} else if value.Valid {
				j.RecruitType = value.String
			}
		case job.FieldPublishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field publish_time", values[i])
			} else if value.Valid {
				j.PublishTime = value.Time
			}
		case job.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				j.Code = value.String
			}
		case job.FieldCityList:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field city_list", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &j.CityList); err != nil {
					return fmt.Errorf("unmarshal field city_list: %w", err)
				}
			}
		default:
			j.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Job.
// This includes values selected through modifiers, order, etc.
func (j *Job) Value(name string) (ent.Value, error) {
	return j.selectValues.Get(name)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return NewJobClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("title=")
	builder.WriteString(j.Title)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(j.Company)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(j.Description)
	builder.WriteString(", ")
	builder.WriteString("requirement=")
	builder.WriteString(j.Requirement)
	builder.WriteString(", ")
	builder.WriteString("job_category=")
	builder.WriteString(j.JobCategory)
	builder.WriteString(", ")
	builder.WriteString("city_info=")
	builder.WriteString(j.CityInfo)
	builder.WriteString(", ")
	builder.WriteString("recruit_type=")
	builder.WriteString(j.RecruitType)
	builder.WriteString(", ")
	builder.WriteString("publish_time=")
	builder.WriteString(j.PublishTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(j.Code)
	builder.WriteString(", ")
	builder.WriteString("city_list=")
	builder.WriteString(fmt.Sprintf("%v", j.CityList))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job
