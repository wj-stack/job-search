// Code generated by ent, DO NOT EDIT.

package application

import (
	"entgo.io/ent/dialect/sql"
	"github.com/wj-stack/job-search/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldUserID, v))
}

// JobID applies equality check predicate on the "job_id" field. It's identical to JobIDEQ.
func JobID(v int) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldJobID, v))
}

// ResumeURL applies equality check predicate on the "resume_url" field. It's identical to ResumeURLEQ.
func ResumeURL(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldResumeURL, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldStatus, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldUserID, v))
}

// JobIDEQ applies the EQ predicate on the "job_id" field.
func JobIDEQ(v int) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldJobID, v))
}

// JobIDNEQ applies the NEQ predicate on the "job_id" field.
func JobIDNEQ(v int) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldJobID, v))
}

// JobIDIn applies the In predicate on the "job_id" field.
func JobIDIn(vs ...int) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldJobID, vs...))
}

// JobIDNotIn applies the NotIn predicate on the "job_id" field.
func JobIDNotIn(vs ...int) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldJobID, vs...))
}

// JobIDGT applies the GT predicate on the "job_id" field.
func JobIDGT(v int) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldJobID, v))
}

// JobIDGTE applies the GTE predicate on the "job_id" field.
func JobIDGTE(v int) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldJobID, v))
}

// JobIDLT applies the LT predicate on the "job_id" field.
func JobIDLT(v int) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldJobID, v))
}

// JobIDLTE applies the LTE predicate on the "job_id" field.
func JobIDLTE(v int) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldJobID, v))
}

// ResumeURLEQ applies the EQ predicate on the "resume_url" field.
func ResumeURLEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldResumeURL, v))
}

// ResumeURLNEQ applies the NEQ predicate on the "resume_url" field.
func ResumeURLNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldResumeURL, v))
}

// ResumeURLIn applies the In predicate on the "resume_url" field.
func ResumeURLIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldResumeURL, vs...))
}

// ResumeURLNotIn applies the NotIn predicate on the "resume_url" field.
func ResumeURLNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldResumeURL, vs...))
}

// ResumeURLGT applies the GT predicate on the "resume_url" field.
func ResumeURLGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldResumeURL, v))
}

// ResumeURLGTE applies the GTE predicate on the "resume_url" field.
func ResumeURLGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldResumeURL, v))
}

// ResumeURLLT applies the LT predicate on the "resume_url" field.
func ResumeURLLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldResumeURL, v))
}

// ResumeURLLTE applies the LTE predicate on the "resume_url" field.
func ResumeURLLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldResumeURL, v))
}

// ResumeURLContains applies the Contains predicate on the "resume_url" field.
func ResumeURLContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldResumeURL, v))
}

// ResumeURLHasPrefix applies the HasPrefix predicate on the "resume_url" field.
func ResumeURLHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldResumeURL, v))
}

// ResumeURLHasSuffix applies the HasSuffix predicate on the "resume_url" field.
func ResumeURLHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldResumeURL, v))
}

// ResumeURLEqualFold applies the EqualFold predicate on the "resume_url" field.
func ResumeURLEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldResumeURL, v))
}

// ResumeURLContainsFold applies the ContainsFold predicate on the "resume_url" field.
func ResumeURLContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldResumeURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Application) predicate.Application {
	return predicate.Application(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Application) predicate.Application {
	return predicate.Application(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Application) predicate.Application {
	return predicate.Application(sql.NotPredicates(p))
}
