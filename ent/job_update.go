// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/wj-stack/job-search/ent/job"
	"github.com/wj-stack/job-search/ent/predicate"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetTitle sets the "title" field.
func (ju *JobUpdate) SetTitle(s string) *JobUpdate {
	ju.mutation.SetTitle(s)
	return ju
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ju *JobUpdate) SetNillableTitle(s *string) *JobUpdate {
	if s != nil {
		ju.SetTitle(*s)
	}
	return ju
}

// SetCompany sets the "company" field.
func (ju *JobUpdate) SetCompany(s string) *JobUpdate {
	ju.mutation.SetCompany(s)
	return ju
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCompany(s *string) *JobUpdate {
	if s != nil {
		ju.SetCompany(*s)
	}
	return ju
}

// SetDescription sets the "description" field.
func (ju *JobUpdate) SetDescription(s string) *JobUpdate {
	ju.mutation.SetDescription(s)
	return ju
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ju *JobUpdate) SetNillableDescription(s *string) *JobUpdate {
	if s != nil {
		ju.SetDescription(*s)
	}
	return ju
}

// SetRequirement sets the "requirement" field.
func (ju *JobUpdate) SetRequirement(s string) *JobUpdate {
	ju.mutation.SetRequirement(s)
	return ju
}

// SetNillableRequirement sets the "requirement" field if the given value is not nil.
func (ju *JobUpdate) SetNillableRequirement(s *string) *JobUpdate {
	if s != nil {
		ju.SetRequirement(*s)
	}
	return ju
}

// SetJobCategory sets the "job_category" field.
func (ju *JobUpdate) SetJobCategory(s string) *JobUpdate {
	ju.mutation.SetJobCategory(s)
	return ju
}

// SetNillableJobCategory sets the "job_category" field if the given value is not nil.
func (ju *JobUpdate) SetNillableJobCategory(s *string) *JobUpdate {
	if s != nil {
		ju.SetJobCategory(*s)
	}
	return ju
}

// SetCityInfo sets the "city_info" field.
func (ju *JobUpdate) SetCityInfo(s string) *JobUpdate {
	ju.mutation.SetCityInfo(s)
	return ju
}

// SetNillableCityInfo sets the "city_info" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCityInfo(s *string) *JobUpdate {
	if s != nil {
		ju.SetCityInfo(*s)
	}
	return ju
}

// SetRecruitType sets the "recruit_type" field.
func (ju *JobUpdate) SetRecruitType(s string) *JobUpdate {
	ju.mutation.SetRecruitType(s)
	return ju
}

// SetNillableRecruitType sets the "recruit_type" field if the given value is not nil.
func (ju *JobUpdate) SetNillableRecruitType(s *string) *JobUpdate {
	if s != nil {
		ju.SetRecruitType(*s)
	}
	return ju
}

// SetPublishTime sets the "publish_time" field.
func (ju *JobUpdate) SetPublishTime(t time.Time) *JobUpdate {
	ju.mutation.SetPublishTime(t)
	return ju
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (ju *JobUpdate) SetNillablePublishTime(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetPublishTime(*t)
	}
	return ju
}

// SetCode sets the "code" field.
func (ju *JobUpdate) SetCode(s string) *JobUpdate {
	ju.mutation.SetCode(s)
	return ju
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCode(s *string) *JobUpdate {
	if s != nil {
		ju.SetCode(*s)
	}
	return ju
}

// SetCityList sets the "city_list" field.
func (ju *JobUpdate) SetCityList(s []string) *JobUpdate {
	ju.mutation.SetCityList(s)
	return ju
}

// AppendCityList appends s to the "city_list" field.
func (ju *JobUpdate) AppendCityList(s []string) *JobUpdate {
	ju.mutation.AppendCityList(s)
	return ju
}

// ClearCityList clears the value of the "city_list" field.
func (ju *JobUpdate) ClearCityList() *JobUpdate {
	ju.mutation.ClearCityList()
	return ju
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JobUpdate) check() error {
	if v, ok := ju.mutation.Title(); ok {
		if err := job.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Job.title": %w`, err)}
		}
	}
	if v, ok := ju.mutation.Company(); ok {
		if err := job.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "Job.company": %w`, err)}
		}
	}
	return nil
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Title(); ok {
		_spec.SetField(job.FieldTitle, field.TypeString, value)
	}
	if value, ok := ju.mutation.Company(); ok {
		_spec.SetField(job.FieldCompany, field.TypeString, value)
	}
	if value, ok := ju.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
	}
	if value, ok := ju.mutation.Requirement(); ok {
		_spec.SetField(job.FieldRequirement, field.TypeString, value)
	}
	if value, ok := ju.mutation.JobCategory(); ok {
		_spec.SetField(job.FieldJobCategory, field.TypeString, value)
	}
	if value, ok := ju.mutation.CityInfo(); ok {
		_spec.SetField(job.FieldCityInfo, field.TypeString, value)
	}
	if value, ok := ju.mutation.RecruitType(); ok {
		_spec.SetField(job.FieldRecruitType, field.TypeString, value)
	}
	if value, ok := ju.mutation.PublishTime(); ok {
		_spec.SetField(job.FieldPublishTime, field.TypeTime, value)
	}
	if value, ok := ju.mutation.Code(); ok {
		_spec.SetField(job.FieldCode, field.TypeString, value)
	}
	if value, ok := ju.mutation.CityList(); ok {
		_spec.SetField(job.FieldCityList, field.TypeJSON, value)
	}
	if value, ok := ju.mutation.AppendedCityList(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldCityList, value)
		})
	}
	if ju.mutation.CityListCleared() {
		_spec.ClearField(job.FieldCityList, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetTitle sets the "title" field.
func (juo *JobUpdateOne) SetTitle(s string) *JobUpdateOne {
	juo.mutation.SetTitle(s)
	return juo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableTitle(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetTitle(*s)
	}
	return juo
}

// SetCompany sets the "company" field.
func (juo *JobUpdateOne) SetCompany(s string) *JobUpdateOne {
	juo.mutation.SetCompany(s)
	return juo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCompany(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetCompany(*s)
	}
	return juo
}

// SetDescription sets the "description" field.
func (juo *JobUpdateOne) SetDescription(s string) *JobUpdateOne {
	juo.mutation.SetDescription(s)
	return juo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableDescription(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetDescription(*s)
	}
	return juo
}

// SetRequirement sets the "requirement" field.
func (juo *JobUpdateOne) SetRequirement(s string) *JobUpdateOne {
	juo.mutation.SetRequirement(s)
	return juo
}

// SetNillableRequirement sets the "requirement" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRequirement(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetRequirement(*s)
	}
	return juo
}

// SetJobCategory sets the "job_category" field.
func (juo *JobUpdateOne) SetJobCategory(s string) *JobUpdateOne {
	juo.mutation.SetJobCategory(s)
	return juo
}

// SetNillableJobCategory sets the "job_category" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableJobCategory(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetJobCategory(*s)
	}
	return juo
}

// SetCityInfo sets the "city_info" field.
func (juo *JobUpdateOne) SetCityInfo(s string) *JobUpdateOne {
	juo.mutation.SetCityInfo(s)
	return juo
}

// SetNillableCityInfo sets the "city_info" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCityInfo(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetCityInfo(*s)
	}
	return juo
}

// SetRecruitType sets the "recruit_type" field.
func (juo *JobUpdateOne) SetRecruitType(s string) *JobUpdateOne {
	juo.mutation.SetRecruitType(s)
	return juo
}

// SetNillableRecruitType sets the "recruit_type" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRecruitType(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetRecruitType(*s)
	}
	return juo
}

// SetPublishTime sets the "publish_time" field.
func (juo *JobUpdateOne) SetPublishTime(t time.Time) *JobUpdateOne {
	juo.mutation.SetPublishTime(t)
	return juo
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillablePublishTime(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetPublishTime(*t)
	}
	return juo
}

// SetCode sets the "code" field.
func (juo *JobUpdateOne) SetCode(s string) *JobUpdateOne {
	juo.mutation.SetCode(s)
	return juo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCode(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetCode(*s)
	}
	return juo
}

// SetCityList sets the "city_list" field.
func (juo *JobUpdateOne) SetCityList(s []string) *JobUpdateOne {
	juo.mutation.SetCityList(s)
	return juo
}

// AppendCityList appends s to the "city_list" field.
func (juo *JobUpdateOne) AppendCityList(s []string) *JobUpdateOne {
	juo.mutation.AppendCityList(s)
	return juo
}

// ClearCityList clears the value of the "city_list" field.
func (juo *JobUpdateOne) ClearCityList() *JobUpdateOne {
	juo.mutation.ClearCityList()
	return juo
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JobUpdateOne) check() error {
	if v, ok := juo.mutation.Title(); ok {
		if err := job.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Job.title": %w`, err)}
		}
	}
	if v, ok := juo.mutation.Company(); ok {
		if err := job.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "Job.company": %w`, err)}
		}
	}
	return nil
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	if err := juo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.Title(); ok {
		_spec.SetField(job.FieldTitle, field.TypeString, value)
	}
	if value, ok := juo.mutation.Company(); ok {
		_spec.SetField(job.FieldCompany, field.TypeString, value)
	}
	if value, ok := juo.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
	}
	if value, ok := juo.mutation.Requirement(); ok {
		_spec.SetField(job.FieldRequirement, field.TypeString, value)
	}
	if value, ok := juo.mutation.JobCategory(); ok {
		_spec.SetField(job.FieldJobCategory, field.TypeString, value)
	}
	if value, ok := juo.mutation.CityInfo(); ok {
		_spec.SetField(job.FieldCityInfo, field.TypeString, value)
	}
	if value, ok := juo.mutation.RecruitType(); ok {
		_spec.SetField(job.FieldRecruitType, field.TypeString, value)
	}
	if value, ok := juo.mutation.PublishTime(); ok {
		_spec.SetField(job.FieldPublishTime, field.TypeTime, value)
	}
	if value, ok := juo.mutation.Code(); ok {
		_spec.SetField(job.FieldCode, field.TypeString, value)
	}
	if value, ok := juo.mutation.CityList(); ok {
		_spec.SetField(job.FieldCityList, field.TypeJSON, value)
	}
	if value, ok := juo.mutation.AppendedCityList(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldCityList, value)
		})
	}
	if juo.mutation.CityListCleared() {
		_spec.ClearField(job.FieldCityList, field.TypeJSON)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
