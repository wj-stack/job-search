// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wj-stack/job-search/ent/job"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (jc *JobCreate) SetTitle(s string) *JobCreate {
	jc.mutation.SetTitle(s)
	return jc
}

// SetCompany sets the "company" field.
func (jc *JobCreate) SetCompany(s string) *JobCreate {
	jc.mutation.SetCompany(s)
	return jc
}

// SetDescription sets the "description" field.
func (jc *JobCreate) SetDescription(s string) *JobCreate {
	jc.mutation.SetDescription(s)
	return jc
}

// SetRequirement sets the "requirement" field.
func (jc *JobCreate) SetRequirement(s string) *JobCreate {
	jc.mutation.SetRequirement(s)
	return jc
}

// SetJobCategory sets the "job_category" field.
func (jc *JobCreate) SetJobCategory(s string) *JobCreate {
	jc.mutation.SetJobCategory(s)
	return jc
}

// SetCityInfo sets the "city_info" field.
func (jc *JobCreate) SetCityInfo(s string) *JobCreate {
	jc.mutation.SetCityInfo(s)
	return jc
}

// SetRecruitType sets the "recruit_type" field.
func (jc *JobCreate) SetRecruitType(s string) *JobCreate {
	jc.mutation.SetRecruitType(s)
	return jc
}

// SetPublishTime sets the "publish_time" field.
func (jc *JobCreate) SetPublishTime(t time.Time) *JobCreate {
	jc.mutation.SetPublishTime(t)
	return jc
}

// SetCode sets the "code" field.
func (jc *JobCreate) SetCode(s string) *JobCreate {
	jc.mutation.SetCode(s)
	return jc
}

// SetCityList sets the "city_list" field.
func (jc *JobCreate) SetCityList(s []string) *JobCreate {
	jc.mutation.SetCityList(s)
	return jc
}

// SetID sets the "id" field.
func (jc *JobCreate) SetID(i int) *JobCreate {
	jc.mutation.SetID(i)
	return jc
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	return withHooks(ctx, jc.sqlSave, jc.mutation, jc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JobCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JobCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JobCreate) check() error {
	if _, ok := jc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Job.title"`)}
	}
	if v, ok := jc.mutation.Title(); ok {
		if err := job.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Job.title": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Company(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required field "Job.company"`)}
	}
	if v, ok := jc.mutation.Company(); ok {
		if err := job.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "Job.company": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Job.description"`)}
	}
	if _, ok := jc.mutation.Requirement(); !ok {
		return &ValidationError{Name: "requirement", err: errors.New(`ent: missing required field "Job.requirement"`)}
	}
	if _, ok := jc.mutation.JobCategory(); !ok {
		return &ValidationError{Name: "job_category", err: errors.New(`ent: missing required field "Job.job_category"`)}
	}
	if _, ok := jc.mutation.CityInfo(); !ok {
		return &ValidationError{Name: "city_info", err: errors.New(`ent: missing required field "Job.city_info"`)}
	}
	if _, ok := jc.mutation.RecruitType(); !ok {
		return &ValidationError{Name: "recruit_type", err: errors.New(`ent: missing required field "Job.recruit_type"`)}
	}
	if _, ok := jc.mutation.PublishTime(); !ok {
		return &ValidationError{Name: "publish_time", err: errors.New(`ent: missing required field "Job.publish_time"`)}
	}
	if _, ok := jc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Job.code"`)}
	}
	return nil
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	if err := jc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	jc.mutation.id = &_node.ID
	jc.mutation.done = true
	return _node, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: jc.config}
		_spec = sqlgraph.NewCreateSpec(job.Table, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	)
	if id, ok := jc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jc.mutation.Title(); ok {
		_spec.SetField(job.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := jc.mutation.Company(); ok {
		_spec.SetField(job.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := jc.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := jc.mutation.Requirement(); ok {
		_spec.SetField(job.FieldRequirement, field.TypeString, value)
		_node.Requirement = value
	}
	if value, ok := jc.mutation.JobCategory(); ok {
		_spec.SetField(job.FieldJobCategory, field.TypeString, value)
		_node.JobCategory = value
	}
	if value, ok := jc.mutation.CityInfo(); ok {
		_spec.SetField(job.FieldCityInfo, field.TypeString, value)
		_node.CityInfo = value
	}
	if value, ok := jc.mutation.RecruitType(); ok {
		_spec.SetField(job.FieldRecruitType, field.TypeString, value)
		_node.RecruitType = value
	}
	if value, ok := jc.mutation.PublishTime(); ok {
		_spec.SetField(job.FieldPublishTime, field.TypeTime, value)
		_node.PublishTime = value
	}
	if value, ok := jc.mutation.Code(); ok {
		_spec.SetField(job.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := jc.mutation.CityList(); ok {
		_spec.SetField(job.FieldCityList, field.TypeJSON, value)
		_node.CityList = value
	}
	return _node, _spec
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	err      error
	builders []*JobCreate
}

// Save creates the Job entities in the database.
func (jcb *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	if jcb.err != nil {
		return nil, jcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Job, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JobCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JobCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}
