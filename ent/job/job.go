// Code generated by ent, DO NOT EDIT.

package job

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldCompany holds the string denoting the company field in the database.
	FieldCompany = "company"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRequirement holds the string denoting the requirement field in the database.
	FieldRequirement = "requirement"
	// FieldJobCategory holds the string denoting the job_category field in the database.
	FieldJobCategory = "job_category"
	// FieldCityInfo holds the string denoting the city_info field in the database.
	FieldCityInfo = "city_info"
	// FieldRecruitType holds the string denoting the recruit_type field in the database.
	FieldRecruitType = "recruit_type"
	// FieldPublishTime holds the string denoting the publish_time field in the database.
	FieldPublishTime = "publish_time"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldCityList holds the string denoting the city_list field in the database.
	FieldCityList = "city_list"
	// Table holds the table name of the job in the database.
	Table = "jobs"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldCompany,
	FieldDescription,
	FieldRequirement,
	FieldJobCategory,
	FieldCityInfo,
	FieldRecruitType,
	FieldPublishTime,
	FieldCode,
	FieldCityList,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// CompanyValidator is a validator for the "company" field. It is called by the builders before save.
	CompanyValidator func(string) error
)

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByCompany orders the results by the company field.
func ByCompany(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompany, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRequirement orders the results by the requirement field.
func ByRequirement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequirement, opts...).ToFunc()
}

// ByJobCategory orders the results by the job_category field.
func ByJobCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobCategory, opts...).ToFunc()
}

// ByCityInfo orders the results by the city_info field.
func ByCityInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityInfo, opts...).ToFunc()
}

// ByRecruitType orders the results by the recruit_type field.
func ByRecruitType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecruitType, opts...).ToFunc()
}

// ByPublishTime orders the results by the publish_time field.
func ByPublishTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishTime, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}
