// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/wj-stack/job-search/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTitle, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCompany, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDescription, v))
}

// Requirement applies equality check predicate on the "requirement" field. It's identical to RequirementEQ.
func Requirement(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRequirement, v))
}

// JobCategory applies equality check predicate on the "job_category" field. It's identical to JobCategoryEQ.
func JobCategory(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldJobCategory, v))
}

// CityInfo applies equality check predicate on the "city_info" field. It's identical to CityInfoEQ.
func CityInfo(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCityInfo, v))
}

// RecruitType applies equality check predicate on the "recruit_type" field. It's identical to RecruitTypeEQ.
func RecruitType(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRecruitType, v))
}

// PublishTime applies equality check predicate on the "publish_time" field. It's identical to PublishTimeEQ.
func PublishTime(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPublishTime, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCode, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldTitle, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldCompany, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldDescription, v))
}

// RequirementEQ applies the EQ predicate on the "requirement" field.
func RequirementEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRequirement, v))
}

// RequirementNEQ applies the NEQ predicate on the "requirement" field.
func RequirementNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldRequirement, v))
}

// RequirementIn applies the In predicate on the "requirement" field.
func RequirementIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldRequirement, vs...))
}

// RequirementNotIn applies the NotIn predicate on the "requirement" field.
func RequirementNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldRequirement, vs...))
}

// RequirementGT applies the GT predicate on the "requirement" field.
func RequirementGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldRequirement, v))
}

// RequirementGTE applies the GTE predicate on the "requirement" field.
func RequirementGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldRequirement, v))
}

// RequirementLT applies the LT predicate on the "requirement" field.
func RequirementLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldRequirement, v))
}

// RequirementLTE applies the LTE predicate on the "requirement" field.
func RequirementLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldRequirement, v))
}

// RequirementContains applies the Contains predicate on the "requirement" field.
func RequirementContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldRequirement, v))
}

// RequirementHasPrefix applies the HasPrefix predicate on the "requirement" field.
func RequirementHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldRequirement, v))
}

// RequirementHasSuffix applies the HasSuffix predicate on the "requirement" field.
func RequirementHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldRequirement, v))
}

// RequirementEqualFold applies the EqualFold predicate on the "requirement" field.
func RequirementEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldRequirement, v))
}

// RequirementContainsFold applies the ContainsFold predicate on the "requirement" field.
func RequirementContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldRequirement, v))
}

// JobCategoryEQ applies the EQ predicate on the "job_category" field.
func JobCategoryEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldJobCategory, v))
}

// JobCategoryNEQ applies the NEQ predicate on the "job_category" field.
func JobCategoryNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldJobCategory, v))
}

// JobCategoryIn applies the In predicate on the "job_category" field.
func JobCategoryIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldJobCategory, vs...))
}

// JobCategoryNotIn applies the NotIn predicate on the "job_category" field.
func JobCategoryNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldJobCategory, vs...))
}

// JobCategoryGT applies the GT predicate on the "job_category" field.
func JobCategoryGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldJobCategory, v))
}

// JobCategoryGTE applies the GTE predicate on the "job_category" field.
func JobCategoryGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldJobCategory, v))
}

// JobCategoryLT applies the LT predicate on the "job_category" field.
func JobCategoryLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldJobCategory, v))
}

// JobCategoryLTE applies the LTE predicate on the "job_category" field.
func JobCategoryLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldJobCategory, v))
}

// JobCategoryContains applies the Contains predicate on the "job_category" field.
func JobCategoryContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldJobCategory, v))
}

// JobCategoryHasPrefix applies the HasPrefix predicate on the "job_category" field.
func JobCategoryHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldJobCategory, v))
}

// JobCategoryHasSuffix applies the HasSuffix predicate on the "job_category" field.
func JobCategoryHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldJobCategory, v))
}

// JobCategoryEqualFold applies the EqualFold predicate on the "job_category" field.
func JobCategoryEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldJobCategory, v))
}

// JobCategoryContainsFold applies the ContainsFold predicate on the "job_category" field.
func JobCategoryContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldJobCategory, v))
}

// CityInfoEQ applies the EQ predicate on the "city_info" field.
func CityInfoEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCityInfo, v))
}

// CityInfoNEQ applies the NEQ predicate on the "city_info" field.
func CityInfoNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCityInfo, v))
}

// CityInfoIn applies the In predicate on the "city_info" field.
func CityInfoIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCityInfo, vs...))
}

// CityInfoNotIn applies the NotIn predicate on the "city_info" field.
func CityInfoNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCityInfo, vs...))
}

// CityInfoGT applies the GT predicate on the "city_info" field.
func CityInfoGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCityInfo, v))
}

// CityInfoGTE applies the GTE predicate on the "city_info" field.
func CityInfoGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCityInfo, v))
}

// CityInfoLT applies the LT predicate on the "city_info" field.
func CityInfoLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCityInfo, v))
}

// CityInfoLTE applies the LTE predicate on the "city_info" field.
func CityInfoLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCityInfo, v))
}

// CityInfoContains applies the Contains predicate on the "city_info" field.
func CityInfoContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldCityInfo, v))
}

// CityInfoHasPrefix applies the HasPrefix predicate on the "city_info" field.
func CityInfoHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldCityInfo, v))
}

// CityInfoHasSuffix applies the HasSuffix predicate on the "city_info" field.
func CityInfoHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldCityInfo, v))
}

// CityInfoEqualFold applies the EqualFold predicate on the "city_info" field.
func CityInfoEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldCityInfo, v))
}

// CityInfoContainsFold applies the ContainsFold predicate on the "city_info" field.
func CityInfoContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldCityInfo, v))
}

// RecruitTypeEQ applies the EQ predicate on the "recruit_type" field.
func RecruitTypeEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRecruitType, v))
}

// RecruitTypeNEQ applies the NEQ predicate on the "recruit_type" field.
func RecruitTypeNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldRecruitType, v))
}

// RecruitTypeIn applies the In predicate on the "recruit_type" field.
func RecruitTypeIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldRecruitType, vs...))
}

// RecruitTypeNotIn applies the NotIn predicate on the "recruit_type" field.
func RecruitTypeNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldRecruitType, vs...))
}

// RecruitTypeGT applies the GT predicate on the "recruit_type" field.
func RecruitTypeGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldRecruitType, v))
}

// RecruitTypeGTE applies the GTE predicate on the "recruit_type" field.
func RecruitTypeGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldRecruitType, v))
}

// RecruitTypeLT applies the LT predicate on the "recruit_type" field.
func RecruitTypeLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldRecruitType, v))
}

// RecruitTypeLTE applies the LTE predicate on the "recruit_type" field.
func RecruitTypeLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldRecruitType, v))
}

// RecruitTypeContains applies the Contains predicate on the "recruit_type" field.
func RecruitTypeContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldRecruitType, v))
}

// RecruitTypeHasPrefix applies the HasPrefix predicate on the "recruit_type" field.
func RecruitTypeHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldRecruitType, v))
}

// RecruitTypeHasSuffix applies the HasSuffix predicate on the "recruit_type" field.
func RecruitTypeHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldRecruitType, v))
}

// RecruitTypeEqualFold applies the EqualFold predicate on the "recruit_type" field.
func RecruitTypeEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldRecruitType, v))
}

// RecruitTypeContainsFold applies the ContainsFold predicate on the "recruit_type" field.
func RecruitTypeContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldRecruitType, v))
}

// PublishTimeEQ applies the EQ predicate on the "publish_time" field.
func PublishTimeEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPublishTime, v))
}

// PublishTimeNEQ applies the NEQ predicate on the "publish_time" field.
func PublishTimeNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldPublishTime, v))
}

// PublishTimeIn applies the In predicate on the "publish_time" field.
func PublishTimeIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldPublishTime, vs...))
}

// PublishTimeNotIn applies the NotIn predicate on the "publish_time" field.
func PublishTimeNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldPublishTime, vs...))
}

// PublishTimeGT applies the GT predicate on the "publish_time" field.
func PublishTimeGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldPublishTime, v))
}

// PublishTimeGTE applies the GTE predicate on the "publish_time" field.
func PublishTimeGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldPublishTime, v))
}

// PublishTimeLT applies the LT predicate on the "publish_time" field.
func PublishTimeLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldPublishTime, v))
}

// PublishTimeLTE applies the LTE predicate on the "publish_time" field.
func PublishTimeLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldPublishTime, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldCode, v))
}

// CityListIsNil applies the IsNil predicate on the "city_list" field.
func CityListIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldCityList))
}

// CityListNotNil applies the NotNil predicate on the "city_list" field.
func CityListNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldCityList))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
